using System;
using System.Diagnostics;

class Node
{
    public int key;
    public int value;
    public Node left, right;
    public int height;

    public Node(int item, int val)
    {
        key = item;
        value = val;
        height = 1;
    }
}

class AVLTree
{
    Node root;

    int height(Node N)
    {
        if (N == null)
            return 0;
        return N.height;
    }

    int max(int a, int b)
    {
        return (a > b) ? a : b;
    }

    Node rightRotate(Node y)
    {
        Node x = y.left;
        Node T2 = x.right;

        x.right = y;
        y.left = T2;

        y.height = max(height(y.left), height(y.right)) + 1;
        x.height = max(height(x.left), height(x.right)) + 1;

        return x;
    }

    Node leftRotate(Node x)
    {
        Node y = x.right;
        Node T2 = y.left;

        y.left = x;
        x.right = T2;

        x.height = max(height(x.left), height(x.right)) + 1;
        y.height = max(height(y.left), height(y.right)) + 1;

        return y;
    }

    int getBalance(Node N)
    {
        if (N == null)
            return 0;
        return height(N.left) - height(N.right);
    }

    public Node insert(Node node, int key, int value)
    {
        if (node == null)
            return (new Node(key, value));

        if (key < node.key)
            node.left = insert(node.left, key, value);
        else if (key > node.key)
            node.right = insert(node.right, key, value);
        else
            return node;

        node.height = 1 + max(height(node.left), height(node.right));

        int balance = getBalance(node);

        if (balance > 1 && key < node.left.key)
            return rightRotate(node);

        if (balance < -1 && key > node.right.key)
            return leftRotate(node);

        if (balance > 1 && key > node.left.key)
        {
            node.left = leftRotate(node.left);
            return rightRotate(node);
        }

        if (balance < -1 && key < node.right.key)
        {
            node.right = rightRotate(node.right);
            return leftRotate(node);
        }

        return node;
    }

    Node minValueNode(Node node)
    {
        Node current = node;

        while (current.left != null)
            current = current.left;

        return current;
    }

    public Node deleteNode(Node root, int key)
    {
        if (root == null)
            return root;

        if (key < root.key)
            root.left = deleteNode(root.left, key);
        else if (key > root.key)
            root.right = deleteNode(root.right, key);
        else
        {
            if ((root.left == null) || (root.right == null))
            {
                Node temp = null;
                if (temp == root.left)
                    temp = root.right;
                else
                    temp = root.left;

                if (temp == null)
                {
                    temp = root;
                    root = null;
                }
                else
                    root = temp;
            }
            else
            {
                Node temp = minValueNode(root.right);
                root.key = temp.key;
                root.right = deleteNode(root.right, temp.key);
            }
        }

        if (root == null)
            return root;

        root.height = max(height(root.left), height(root.right)) + 1;

        int balance = getBalance(root);

        if (balance > 1 && getBalance(root.left) >= 0)
            return rightRotate(root);

        if (balance > 1 && getBalance(root.left) < 0)
        {
            root.left = leftRotate(root.left);
            return rightRotate(root);
        }

        if (balance < -1 && getBalance(root.right) <= 0)
            return leftRotate(root);

        if (balance < -1 && getBalance(root.right) > 0)
        {
            root.right = rightRotate(root.right);
            return leftRotate(root);
        }

        return root;
    }

    void preOrder(Node node)
    {
        if (node != null)
        {
            Console.WriteLine("Key: " + node.key + ", Value: " + node.value);
            preOrder(node.left);
            preOrder(node.right);
        }
    }

    public void display()
    {
        preOrder(root);
    }

    Node search(Node root, int key)
    {
        if (root == null || root.key == key)
            return root;

        if (root.key < key)
            return search(root.right, key);

        return search(root.left, key);
    }

    public void SearchKey(int key)
    {
        Node result = search(root, key);
        if (result != null)
            Console.WriteLine("Key: " + result.key + ", Value: " + result.value);
        else
            Console.WriteLine("Key not found in the tree.");
    }

    public static void Main(string[] args)
    {
        Stopwatch stopwatch = new Stopwatch();
        AVLTree tree = new AVLTree();

        int[] keys = {2,19,5,20,6,7,8,15,10,18,12,3,13,9,14,1,16,4,17,11};
        int[] values = { 90, 50, 100, 0, 60, 110, -10, 10, 20, 120, 312, 56, 42, 232,65, 23, 36,32,93,28 };
        
        for (int i = 0; i < keys.Length; i++)
        {
            tree.root = tree.insert(tree.root, keys[i], values[i]);
        }
        
        Console.WriteLine("Preorder Traversal of constructed AVL tree is:");

        
        tree.display();

        
        tree.root = tree.deleteNode(tree.root, 16);
        
        stopwatch.Start();
        tree.SearchKey(8);
        stopwatch.Stop();
        Console.WriteLine("Preorder Traversal after deletion of 10:");
        
        tree.display();
       
        Console.WriteLine(stopwatch.ElapsedTicks);
    }
}
